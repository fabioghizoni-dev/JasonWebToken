unit uMain;

interface

uses
  Horse,
  Horse.JWT,
  Horse.Jhonson,
  Horse.BasicAuthentication,
  JOSE.Core.JWT,
  JOSE.Core.JWK,
  JOSE.Core.Builder,
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.ExtCtrls,
  Vcl.StdCtrls;

type
  TfrmMain = class(TForm)
    pnlMain: TPanel;
    pnlCheckBox: TPanel;
    pnlLblStandard: TPanel;
    lblStandard: TLabel;
    check: TCheckBox;
    pnlQuite: TPanel;
    pnlLblUser: TPanel;
    lblUser: TLabel;
    pnlEdtUser: TPanel;
    edtUser: TEdit;
    pnlLblPassWord: TPanel;
    pnlEdtPassWord: TPanel;
    lblPassWord: TLabel;
    edtPassWord: TEdit;
    pnlBtnConfirm: TPanel;
    btnConfirm: TButton;
    mmoJSON: TMemo;
    pnlMMO: TPanel;
    procedure checkClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnConfirmClick(Sender: TObject);
  private
    procedure JWTAuth(LToken: String);
    procedure FirstAuth(ID: Integer; LToken, Server_User, Server_Pass: String);
    function CallBackValidation(const AUsername, APassword: string): Boolean;
    function MakeJWT(User, PassWord, Issuer, Subject: String): String;
    function ValidJWT(LCompactToken: String): Boolean;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmMain: TfrmMain;

implementation

uses
  System.JSON,
  System.DateUtils;

{$R *.dfm}



{ TfrmMain }

procedure TfrmMain.FormCreate(Sender: TObject);
begin
  try

    THorse.Listen(8080,
    procedure
    begin
      if THorse.IsRunning = True then
        Caption := Format('Servidor rodando em %d', [THorse.Port]) + '...';
    end);

  except

    on E:Exception do
      if THorse.IsRunning = False then
        Caption := ('Erro no Servidor...');

  end;

  try

    THorse
      .Use(Jhonson);

//    mmoJSON.Clear;
//    checkClick(Sender);
//    Server_User := 'Fabio Ghizoni';
//    Server_Pass := '12345678';
//    ID := 40028922;

  finally

  end;

end;

procedure TfrmMain.FirstAuth(ID: Integer; LToken, Server_User, Server_Pass: String);
begin
  try
    try

      THorse
      {--| Configurações básicas do Middleware BasicAuthentication |--}
        .Use(HorseBasicAuthentication(CallBackValidation,
      THorseBasicAuthenticationConfig.New.Header('HeaderBASIC')))
        .Use(HorseBasicAuthentication(CallBackValidation,
      THorseBasicAuthenticationConfig.New.SkipRoutes(['/private/TokenAuth'])));

      {--| Rota para autenticação básica /private/FirstAuth |--}
      THorse.Post('private/FirstAuth',
      procedure(Req: THorseRequest; Res: THorseResponse)
      begin

        try

          Res.ContentType('application/json');
          {--| Faz o Jason WEB Token de Acordo com as Chaves |--}
          LToken := MakeJWT(Server_User, Server_Pass, 'SOS Soluções', IntToStr(ID));
          Res.Send(LToken);

        except
          on E: Exception do
            Res.Send('Classe: ' + E.ClassName + sLineBreak + 'Erro: ' + E.Message);
        end;

      end);

    except

      on E: Exception do
        ShowMessage('Classe: ' + E.ClassName + sLineBreak + 'Erro: ' + E.Message);

    end;
  finally

    THorse
    {--| Configurações básicas do Middleware BasicAuthentication |--}
    .Use(HorseBasicAuthentication(CallBackValidation,
      THorseBasicAuthenticationConfig.New.Header('HeaderBASIC')))
    .Use(HorseBasicAuthentication(CallBackValidation,
    THorseBasicAuthenticationConfig.New.SkipRoutes
      (['/private/TokenAuth']))).Free;

  end;
end;

procedure TfrmMain.JWTAuth(LToken: String);
begin

  try

    THorse
      {--| Configurações básicas do Middleware JWT |--}
      .Use(HorseJWT(LToken, THorseJWTConfig.New.Header('HeaderJWT')))
      .Use(HorseJWT(LToken, THorseJWTConfig.New.SkipRoutes('private/FirstAuth')));

    {--| Rota /private/TokenAuth para autenticação do JWT |--}
    THorse.Get('private/TokenAuth',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      try
        Res.Send('Deu bom');
      except
        on E:Exception do
          Res.Send('Classe: ' + E.ClassName + sLineBreak + 'Erro: ' + E.Message);
      end;
    end);

  except

    on E: Exception do
      ShowMessage('Classe: ' + E.ClassName + sLineBreak + 'Erro: ' + E.Message);

  end;

end;

function TfrmMain.CallBackValidation(const AUsername, APassword: String): Boolean;
begin
  Result := AUsername.Equals('Fabio Ghizoni') and APassword.Equals('12345678');
end;

function TfrmMain.MakeJWT(User, PassWord, Issuer, Subject: String): String;
var
  LTokenJWT: TJWT;
  LCompactToken: string;
begin

  Result := EmptyStr;

  if (User = 'Fabio Ghizoni') and (PassWord = '12345678') then
  begin
    try

      if mmoJSON.Lines.Count > 1 then
        mmoJSON.Clear;

      if not (Trim(Issuer) = EmptyStr) and not (Trim(Subject) = EmptyStr) then
      begin

        LTokenJWT := TJWT.Create;

        LTokenJWT.Claims.Issuer := Issuer;
        LTokenJWT.Claims.Subject := Subject;
        LTokenJWT.Claims.IssuedAt := Now;
        LTokenJWT.Claims.Expiration := IncHour(Now + 1);

        LCompactToken := TJOSE.SHA512CompactToken('secret_key', LTokenJWT);
        ValidJWT(LCompactToken);

        mmoJSON.Lines.Add(LCompactToken);
        Result := LCompactToken;

      end;

    finally

      FreeAndNil(LTokenJWT);

    end;
  end;

end;

function TfrmMain.ValidJWT(LCompactToken: String): Boolean;
var
  JWT: TJWT;
  LKey: TJWK;
begin

  LKey := TJWK.Create('secret_key');

  JWT := TJOSE.Verify(LKey, LCompactToken);

  if Assigned(JWT) then
  begin
    try

      if JWT.Verified then
      begin
        Result := True;
      end
      else
        Result := False;

    finally
      JWT.Free;
    end;
  end
  else
    Result := False;

end;

procedure TfrmMain.btnConfirmClick(Sender: TObject);
var
  User, PassWord: string;
begin

  User := 'Fabio Ghizoni';
  PassWord := '12345678';

  MakeJWT(User, PassWord, 'SOS Soluções', '40028922');

end;

procedure TfrmMain.checkClick(Sender: TObject);
begin

  if check.Checked = True then
  begin
    edtUser.Text := 'Fabio Ghizoni';
    edtPassWord.Text := '12345678';
  end
  else
  begin
    edtUser.Text := EmptyStr;
    edtPassWord.Text := EmptyStr;
  end;

end;

end.

