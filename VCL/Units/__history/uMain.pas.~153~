unit uMain;

interface

uses
  Horse,
  Horse.Jhonson,
  Horse.BasicAuthentication,
  JOSE.Core.Builder,
  JOSE.Core.JWT,
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.ExtCtrls,
  Vcl.StdCtrls;

type
  TfrmMain = class(TForm)
    pnlMain: TPanel;
    btnInit: TButton;
    pnlPort: TPanel;
    lblPort: TLabel;
    pnlEdts: TPanel;
    edtServer: TEdit;
    edtEndPoint: TEdit;
    lblEndPoint: TLabel;
    edtUserID: TEdit;
    lblUserID: TLabel;
    edtSixID: TEdit;
    lblSixID: TLabel;
    pnlInvisible: TPanel;
    lblStandardPort: TLabel;
    lblStandardEndPoint: TLabel;
    lblStandardSixIDtxt: TLabel;
    lblStandardUserID: TLabel;
    lblRunning: TLabel;
    pnlBtn: TPanel;
    check: TCheckBox;
    lblID: TLabel;
    procedure btnInitClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure checkClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    procedure MakeJWT(EndPoint: String; Port, UserID, SixID: Integer);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmMain: TfrmMain;

implementation

uses System.JSON;

{$R *.dfm}



{ TfrmMain }

procedure TfrmMain.FormCreate(Sender: TObject);
var
  LBody:
  TJSONObject;
  Json:
  TJSONObject;
  JsonStr,
  nServer_User,
  nServer_Pass:
  String;
begin

  nServer_User := 'Fabio Ghizoni';
  nServer_Pass := '40028922';

  THorse.Use(HorseBasicAuthentication(function(const AUsername, APassword:
  String): Boolean
  begin
    Result := AUsername.Equals(nServer_User) and APassword.Equals(nServer_Pass);
  end));

  THorse.Get('/Private/OneAuth', procedure(Req: THorseRequest; Res: THorseResponse)
  begin
    Json := TJSONObject.Create;
    Json.AddPair('nome: ', nServer_User);
    Json.AddPair('pass: ', nServer_Pass);
    Res.Send(Json);
    JsonStr := 'Hello';
  end);

  THorse.Use(Jhonson);

  THorse.Post('/Private/Auth', procedure(Req: THorseRequest; Res: THorseResponse)
  begin
    Res.Send(JsonStr);
  end);

  THorse.Listen(8080);

  if check.Checked = True then
  begin
    edtServer.Text := '8080';
    edtEndPoint.Text := '/auth';
    edtUserID.Text := '1';
    edtSixID.Text := '111111';
    lblStandardPort.Caption := 'Padrão: 8080';
    lblStandardEndPoint.Caption := 'Padrão: /auth';
    lblStandardUserID.Caption := 'Padrão: 1';
    lblStandardSixIDtxt.Caption := 'Padrão: 111111';
  end
  else
  begin
    edtServer.Text := EmptyStr;
    edtEndPoint.Text := EmptyStr;
    edtUserID.Text := EmptyStr;
    edtSixID.Text := EmptyStr;
    lblStandardPort.Caption := 'Padrão: ';
    lblStandardEndPoint.Caption := 'Padrão: ';
    lblStandardUserID.Caption := 'Padrão: ';
    lblStandardSixIDtxt.Caption := 'Padrão: ';
  end;

end;

procedure TfrmMain.btnInitClick(Sender: TObject);
var
  EndPoint,
  Port,
  UserID,
  SixID:
  TCaption;
begin

  EndPoint := edtEndPoint.Text;
  Port := edtServer.Text;
  UserID := edtUserID.Text;
  SixID := edtSixID.Text;

  MakeJWT(EndPoint, StrToInt(Port), StrToInt(UserID), StrToInt(SixID));

end;

procedure TfrmMain.MakeJWT(EndPoint: string; Port, UserID, SixID: Integer);
begin

  if IntToStr(SixID) = lblID.Caption then
  begin
  THorse.Post(EndPoint,
    procedure(Req: THorseRequest; Res: THorseResponse)
    var
      LToken: TJWT;
      LText: String;
      LCompactToken: TJSONObject;
    begin

      try

        LToken := TJWT.Create;

        LToken.Claims.SetClaimOfType<Integer>('user id: ', UserID);
        LToken.Claims.SetClaimOfType<Integer>('id seis dígitos: ', SixID);
        LToken.Claims.Issuer := 'SOS Soluções';
        LToken.Claims.Subject := 'Fabio Ghizoni';
        LToken.Claims.SetClaimOfType<String>('data e hora: ', DateTimeToStr(Now));
        LToken.Claims.Expiration := Now + 1;

        LCompactToken := TJSONObject.Create(TJSONPair.Create('key' , TJOSE.SHA256CompactToken('KEY', LToken)));
        LText := LCompactToken.ToJSON;
        Res.Send(LText);

      finally

        FreeAndNil(LToken);

      end;

    end);

    try

      //THorse.Listen(Port);

      if THorse.IsRunning then
        lblRunning.Caption := 'Está rodando...';

      except

      on E: Exception do
      begin
        ShowMessage('  Erro: ' + E.ClassName + E.Message);
          THorse.StopListen;
      end;

      end;
  end;
end;

procedure TfrmMain.checkClick(Sender: TObject);
begin

  if check.Checked = True then
  begin
    edtServer.Text := '8080';
    edtEndPoint.Text := '/auth';
    edtUserID.Text := '1';
    edtSixID.Text := '111111';
    lblStandardPort.Caption := 'Padrão: 8080';
    lblStandardEndPoint.Caption := 'Padrão: /auth';
    lblStandardUserID.Caption := 'Padrão: 1';
    lblStandardSixIDtxt.Caption := 'Padrão: 111111';
  end
  else
  begin
    edtServer.Text := EmptyStr;
    edtEndPoint.Text := EmptyStr;
    edtUserID.Text := EmptyStr;
    edtSixID.Text := EmptyStr;
    lblStandardPort.Caption := 'Padrão: ';
    lblStandardEndPoint.Caption := 'Padrão: ';
    lblStandardUserID.Caption := 'Padrão: ';
    lblStandardSixIDtxt.Caption := 'Padrão: ';
  end;

end;

procedure TfrmMain.FormDestroy(Sender: TObject);
begin

//  if THorse.IsRunning then
//    THorse.StopListen;

end;

end.
